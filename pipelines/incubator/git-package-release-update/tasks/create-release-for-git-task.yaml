apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: create-release-for-git-task
  namespace: kabanero
  author: Oscar I. Ricaud
spec:
  inputs:
    params:
      - name: asuh-image
        default: googlefu/oscar-image:v2.0
        type: string
      - name: registry
        description: Specify the name of the project being built.
        default: docker.io
    resources:
      - name: source
        type: git
      - name: image
        type: image
  steps:
    - name: setup-environment
      image: $(inputs.params.asuh-image)
      script: |
        cd ci
        ./package.sh

      env:
        - name: IMAGE_REGISTRY_PUBLISH
          valueFrom:
            configMapKeyRef:
              name: pipeline-server-configmap
              key: image_registry_publish
              
      resources: {}
      workingDir: $(inputs.resources.source.path)

    - name: create-release
      image: $(inputs.params.asuh-image)
      args:
        - '-c'
        - |
          set -e

          # This function creates a json file to be used later in the curl call
          get_release_info() {
            {
              cat <<EOF
            {
              "tag_name": "$new_version",
              "target_commitish": "master",
              "name": "$new_version",
              "body": "The pipeline manager deployed this release",
              "draft": false,
              "prerelease": false
            }
          EOF
            }
          }

          echo "REPO_ORG: $REPO_ORG"
          echo "REPO_NAME: $REPO_NAME"

          curl -s https://api.github.com/repos/$REPO_ORG/$REPO_NAME/releases/latest > repo_details.json

          cat ./repo_details.json

          current_version=$(jq --raw-output '.tag_name' ./repo_details.json)

          echo $current_version

          if [[ -n "$current_version" ]]
          then
              echo "The server has already existing releases..."
              new_version=`echo $current_version + 1.0 | bc`
          else
              echo "The server does not have any existing releases"
              current_version=1.0
              new_version=$current_version
          fi
          
          echo "new version: $new_version"

          REPO_FULL_NAME=$REPO_ORG"/"$REPO_NAME
          echo "REPO_FULL_NAME: $REPO_FULL_NAME"
          curl --data "$(get_release_info)" "https://api.github.com/repos/$REPO_FULL_NAME/releases?access_token=$GITHUB_TOKEN"

          echo "DONE"
        
      env:
        - name: REPO_ORG
          valueFrom:
            configMapKeyRef:
              name: pipeline-server-configmap
              key: repo_org
        - name: REPO_NAME
          valueFrom:
            configMapKeyRef:
              name: pipeline-server-configmap
              key: repo_name
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: pipeline-server-git
              key: password

      resources: {}
      workingDir: $(inputs.resources.source.path)

    - name: upload-asset-to-release
      image: $(inputs.params.asuh-image)
      args:
        - '-c'
        - |
          set -e

          echo "GITHUB_TOKEN " $GITHUB_TOKEN
          echo "$REPO_ORG " + $REPO_ORG
          echo "$REPO_NAME " + $REPO_NAME
          echo "waiting..."
          tree 
          sleep 20s
          CONFIG=$@
          AUTH="Authorization: token $GITHUB_TOKEN"
          curl -s https://api.github.com/repos/$REPO_ORG/$REPO_NAME/releases/latest > repo_details.json

          cat ./repo_details.json

          current_version=$(jq --raw-output '.tag_name' ./repo_details.json)
          echo $current_version

          GH_TAGS="https://api.github.com/repos/$REPO_ORG/$REPO_NAME/releases/tags/$current_version"

          filename=./ci/assets/default-kabanero-pipelines.tar.gz
          set -e xargs="$(which gxargs || which xargs)"

          # Validate settings.
          [ "$TRACE" ] && set -x

          for line in $CONFIG; do
            eval "$line"
          done

          if [[ "$current_version" == 'LATEST' ]]; then
            GH_TAGS="https://api.github.com/repos/$REPO_ORG/$REPO_NAME/releases/latest"
          fi

          GH_REPO="https://api.github.com/repos/$REPO_ORG/$REPO_NAME"

          # Validate token.
          curl -o /dev/null -sH "$AUTH" $GH_REPO || {
            echo "Error: Invalid repo, token or network issue!"
            exit 1
          }

          response=$(curl -sH "$AUTH" $GH_TAGS)

          # Get ID of the asset based on given filename.
          eval $(echo "$response" | grep -m 1 "id.:" | grep -w id | tr : = | tr -cd '[[:alnum:]]=')
          [ "$id" ] || {
            echo "Error: Failed to get release id for tag: $tag"
            echo "$response" | awk 'length($0)<100' >&2
            exit 1
          }

          GH_ASSET="https://uploads.github.com/repos/$REPO_ORG/$REPO_NAME/releases/$id/assets?name=$(basename $filename)"
          curl --data-binary @"$filename" -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/octet-stream" "$GH_ASSET"

      env:
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: pipeline-server-git
              key: password      
        - name: REPO_ORG
          valueFrom:
            configMapKeyRef:
              name: pipeline-server-configmap
              key: repo_org
        - name: REPO_NAME
          valueFrom:
            configMapKeyRef:
              name: pipeline-server-configmap
              key: repo_name
        - name: IMAGE_REGISTRY_PUBLISH
          valueFrom:
            configMapKeyRef:
              name: pipeline-server-configmap
              key: image_registry_publish
      resources: {}
      workingDir: $(inputs.resources.source.path)

    - name: update-kabanero-cr
      image: $(inputs.params.asuh-image)
      args:
        - '-c'
        - |
          set -e

          # install packages
          apt-get install -y jq

          oc project kabanero

          oc get kabanero -o json > ./json/kabanero.json

          host_url=https://github.com/$REPO_ORG/$REPO_NAME/releases/download/$current_version/default-kabanero-pipelines.tar.gz

          #get sha256 from previous step on the zip file
          get_sha=$(cat ./256.txt | head -n 1)

          # get the add_pipeline_template.json and replace the url, id and sha256 values and store it in another file
          jq --compact-output '.https.url="'$host_url'" | .id="'$kabanero_pipeline_id'" | .sha256="'$get_sha'"' ./json/add_pipeline_template.json > ./json/add_pipeline_modified_template.json

          echo "applying the new pipeline custom resource..."

          oc patch Kabanero/kabanero -p '{"spec":{"stacks":{"pipelines":['$(cat ./json/add_pipeline_modified_template.json)']}}}' --type=merge --loglevel=9

          echo "we are done"


      env:
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: pipeline-server-git
              key: password
        - name: REPO_ORG
          valueFrom:
            configMapKeyRef:
              name: pipeline-server-configmap
              key: repo_org
        - name: REPO_NAME
          valueFrom:
            configMapKeyRef:
              name: pipeline-server-configmap
              key: repo_name  
      resources: {}
      workingDir: $(inputs.resources.source.path)